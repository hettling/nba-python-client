# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Person(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_text': 'str',
        'full_name': 'str',
        'organization': 'Organization'
    }

    attribute_map = {
        'agent_text': 'agentText',
        'full_name': 'fullName',
        'organization': 'organization'
    }

    def __init__(self, agent_text=None, full_name=None, organization=None):
        """
        Person - a model defined in Swagger
        """

        self._agent_text = None
        self._full_name = None
        self._organization = None
        self.discriminator = None

        if agent_text is not None:
          self.agent_text = agent_text
        if full_name is not None:
          self.full_name = full_name
        if organization is not None:
          self.organization = organization

    @property
    def agent_text(self):
        """
        Gets the agent_text of this Person.

        :return: The agent_text of this Person.
        :rtype: str
        """
        return self._agent_text

    @agent_text.setter
    def agent_text(self, agent_text):
        """
        Sets the agent_text of this Person.

        :param agent_text: The agent_text of this Person.
        :type: str
        """

        self._agent_text = agent_text

    @property
    def full_name(self):
        """
        Gets the full_name of this Person.

        :return: The full_name of this Person.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this Person.

        :param full_name: The full_name of this Person.
        :type: str
        """

        self._full_name = full_name

    @property
    def organization(self):
        """
        Gets the organization of this Person.

        :return: The organization of this Person.
        :rtype: Organization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this Person.

        :param organization: The organization of this Person.
        :type: Organization
        """

        self._organization = organization

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Person):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
