# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SummaryScientificName(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'full_scientific_name': 'str',
        'taxonomic_status': 'str',
        'genus_or_monomial': 'str',
        'subgenus': 'str',
        'specific_epithet': 'str',
        'infraspecific_epithet': 'str',
        'authorship_verbatim': 'str'
    }

    attribute_map = {
        'full_scientific_name': 'fullScientificName',
        'taxonomic_status': 'taxonomicStatus',
        'genus_or_monomial': 'genusOrMonomial',
        'subgenus': 'subgenus',
        'specific_epithet': 'specificEpithet',
        'infraspecific_epithet': 'infraspecificEpithet',
        'authorship_verbatim': 'authorshipVerbatim'
    }

    def __init__(self, full_scientific_name=None, taxonomic_status=None, genus_or_monomial=None, subgenus=None, specific_epithet=None, infraspecific_epithet=None, authorship_verbatim=None):
        """
        SummaryScientificName - a model defined in Swagger
        """

        self._full_scientific_name = None
        self._taxonomic_status = None
        self._genus_or_monomial = None
        self._subgenus = None
        self._specific_epithet = None
        self._infraspecific_epithet = None
        self._authorship_verbatim = None
        self.discriminator = None

        if full_scientific_name is not None:
          self.full_scientific_name = full_scientific_name
        if taxonomic_status is not None:
          self.taxonomic_status = taxonomic_status
        if genus_or_monomial is not None:
          self.genus_or_monomial = genus_or_monomial
        if subgenus is not None:
          self.subgenus = subgenus
        if specific_epithet is not None:
          self.specific_epithet = specific_epithet
        if infraspecific_epithet is not None:
          self.infraspecific_epithet = infraspecific_epithet
        if authorship_verbatim is not None:
          self.authorship_verbatim = authorship_verbatim

    @property
    def full_scientific_name(self):
        """
        Gets the full_scientific_name of this SummaryScientificName.

        :return: The full_scientific_name of this SummaryScientificName.
        :rtype: str
        """
        return self._full_scientific_name

    @full_scientific_name.setter
    def full_scientific_name(self, full_scientific_name):
        """
        Sets the full_scientific_name of this SummaryScientificName.

        :param full_scientific_name: The full_scientific_name of this SummaryScientificName.
        :type: str
        """

        self._full_scientific_name = full_scientific_name

    @property
    def taxonomic_status(self):
        """
        Gets the taxonomic_status of this SummaryScientificName.

        :return: The taxonomic_status of this SummaryScientificName.
        :rtype: str
        """
        return self._taxonomic_status

    @taxonomic_status.setter
    def taxonomic_status(self, taxonomic_status):
        """
        Sets the taxonomic_status of this SummaryScientificName.

        :param taxonomic_status: The taxonomic_status of this SummaryScientificName.
        :type: str
        """
        allowed_values = ["ACCEPTED_NAME", "SYNONYM", "BASIONYM", "HOMONYM", "AMBIGUOUS_SYNONYM", "MISAPPLIED_NAME", "MISSPELLED_NAME", "PROVISIONALLY_ACCEPTED"]
        if taxonomic_status not in allowed_values:
            raise ValueError(
                "Invalid value for `taxonomic_status` ({0}), must be one of {1}"
                .format(taxonomic_status, allowed_values)
            )

        self._taxonomic_status = taxonomic_status

    @property
    def genus_or_monomial(self):
        """
        Gets the genus_or_monomial of this SummaryScientificName.

        :return: The genus_or_monomial of this SummaryScientificName.
        :rtype: str
        """
        return self._genus_or_monomial

    @genus_or_monomial.setter
    def genus_or_monomial(self, genus_or_monomial):
        """
        Sets the genus_or_monomial of this SummaryScientificName.

        :param genus_or_monomial: The genus_or_monomial of this SummaryScientificName.
        :type: str
        """

        self._genus_or_monomial = genus_or_monomial

    @property
    def subgenus(self):
        """
        Gets the subgenus of this SummaryScientificName.

        :return: The subgenus of this SummaryScientificName.
        :rtype: str
        """
        return self._subgenus

    @subgenus.setter
    def subgenus(self, subgenus):
        """
        Sets the subgenus of this SummaryScientificName.

        :param subgenus: The subgenus of this SummaryScientificName.
        :type: str
        """

        self._subgenus = subgenus

    @property
    def specific_epithet(self):
        """
        Gets the specific_epithet of this SummaryScientificName.

        :return: The specific_epithet of this SummaryScientificName.
        :rtype: str
        """
        return self._specific_epithet

    @specific_epithet.setter
    def specific_epithet(self, specific_epithet):
        """
        Sets the specific_epithet of this SummaryScientificName.

        :param specific_epithet: The specific_epithet of this SummaryScientificName.
        :type: str
        """

        self._specific_epithet = specific_epithet

    @property
    def infraspecific_epithet(self):
        """
        Gets the infraspecific_epithet of this SummaryScientificName.

        :return: The infraspecific_epithet of this SummaryScientificName.
        :rtype: str
        """
        return self._infraspecific_epithet

    @infraspecific_epithet.setter
    def infraspecific_epithet(self, infraspecific_epithet):
        """
        Sets the infraspecific_epithet of this SummaryScientificName.

        :param infraspecific_epithet: The infraspecific_epithet of this SummaryScientificName.
        :type: str
        """

        self._infraspecific_epithet = infraspecific_epithet

    @property
    def authorship_verbatim(self):
        """
        Gets the authorship_verbatim of this SummaryScientificName.

        :return: The authorship_verbatim of this SummaryScientificName.
        :rtype: str
        """
        return self._authorship_verbatim

    @authorship_verbatim.setter
    def authorship_verbatim(self, authorship_verbatim):
        """
        Sets the authorship_verbatim of this SummaryScientificName.

        :param authorship_verbatim: The authorship_verbatim of this SummaryScientificName.
        :type: str
        """

        self._authorship_verbatim = authorship_verbatim

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SummaryScientificName):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
