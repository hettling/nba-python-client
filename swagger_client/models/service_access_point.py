# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ServiceAccessPoint(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_uri': 'str',
        'format': 'str',
        'variant': 'str'
    }

    attribute_map = {
        'access_uri': 'accessUri',
        'format': 'format',
        'variant': 'variant'
    }

    def __init__(self, access_uri=None, format=None, variant=None):
        """
        ServiceAccessPoint - a model defined in Swagger
        """

        self._access_uri = None
        self._format = None
        self._variant = None
        self.discriminator = None

        if access_uri is not None:
          self.access_uri = access_uri
        if format is not None:
          self.format = format
        if variant is not None:
          self.variant = variant

    @property
    def access_uri(self):
        """
        Gets the access_uri of this ServiceAccessPoint.

        :return: The access_uri of this ServiceAccessPoint.
        :rtype: str
        """
        return self._access_uri

    @access_uri.setter
    def access_uri(self, access_uri):
        """
        Sets the access_uri of this ServiceAccessPoint.

        :param access_uri: The access_uri of this ServiceAccessPoint.
        :type: str
        """

        self._access_uri = access_uri

    @property
    def format(self):
        """
        Gets the format of this ServiceAccessPoint.

        :return: The format of this ServiceAccessPoint.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this ServiceAccessPoint.

        :param format: The format of this ServiceAccessPoint.
        :type: str
        """

        self._format = format

    @property
    def variant(self):
        """
        Gets the variant of this ServiceAccessPoint.

        :return: The variant of this ServiceAccessPoint.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """
        Sets the variant of this ServiceAccessPoint.

        :param variant: The variant of this ServiceAccessPoint.
        :type: str
        """
        allowed_values = ["THUMBNAIL", "TRAILER", "LOWER_QUALITY", "MEDIUM_QUALITY", "GOOD_QUALITY", "BEST_QUALITY", "OFFLINE"]
        if variant not in allowed_values:
            raise ValueError(
                "Invalid value for `variant` ({0}), must be one of {1}"
                .format(variant, allowed_values)
            )

        self._variant = variant

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServiceAccessPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
