# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GeoArea(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_system': 'SourceSystem',
        'source_system_id': 'str',
        'record_uri': 'str',
        'id': 'str',
        'area_type': 'str',
        'locality': 'str',
        'shape': 'GeoJsonObject',
        'source': 'str',
        'iso_code': 'str',
        'country_nl': 'str'
    }

    attribute_map = {
        'source_system': 'sourceSystem',
        'source_system_id': 'sourceSystemId',
        'record_uri': 'recordURI',
        'id': 'id',
        'area_type': 'areaType',
        'locality': 'locality',
        'shape': 'shape',
        'source': 'source',
        'iso_code': 'isoCode',
        'country_nl': 'countryNL'
    }

    def __init__(self, source_system=None, source_system_id=None, record_uri=None, id=None, area_type=None, locality=None, shape=None, source=None, iso_code=None, country_nl=None):
        """
        GeoArea - a model defined in Swagger
        """

        self._source_system = None
        self._source_system_id = None
        self._record_uri = None
        self._id = None
        self._area_type = None
        self._locality = None
        self._shape = None
        self._source = None
        self._iso_code = None
        self._country_nl = None
        self.discriminator = None

        if source_system is not None:
          self.source_system = source_system
        if source_system_id is not None:
          self.source_system_id = source_system_id
        if record_uri is not None:
          self.record_uri = record_uri
        if id is not None:
          self.id = id
        if area_type is not None:
          self.area_type = area_type
        if locality is not None:
          self.locality = locality
        if shape is not None:
          self.shape = shape
        if source is not None:
          self.source = source
        if iso_code is not None:
          self.iso_code = iso_code
        if country_nl is not None:
          self.country_nl = country_nl

    @property
    def source_system(self):
        """
        Gets the source_system of this GeoArea.

        :return: The source_system of this GeoArea.
        :rtype: SourceSystem
        """
        return self._source_system

    @source_system.setter
    def source_system(self, source_system):
        """
        Sets the source_system of this GeoArea.

        :param source_system: The source_system of this GeoArea.
        :type: SourceSystem
        """

        self._source_system = source_system

    @property
    def source_system_id(self):
        """
        Gets the source_system_id of this GeoArea.

        :return: The source_system_id of this GeoArea.
        :rtype: str
        """
        return self._source_system_id

    @source_system_id.setter
    def source_system_id(self, source_system_id):
        """
        Sets the source_system_id of this GeoArea.

        :param source_system_id: The source_system_id of this GeoArea.
        :type: str
        """

        self._source_system_id = source_system_id

    @property
    def record_uri(self):
        """
        Gets the record_uri of this GeoArea.

        :return: The record_uri of this GeoArea.
        :rtype: str
        """
        return self._record_uri

    @record_uri.setter
    def record_uri(self, record_uri):
        """
        Sets the record_uri of this GeoArea.

        :param record_uri: The record_uri of this GeoArea.
        :type: str
        """

        self._record_uri = record_uri

    @property
    def id(self):
        """
        Gets the id of this GeoArea.

        :return: The id of this GeoArea.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this GeoArea.

        :param id: The id of this GeoArea.
        :type: str
        """

        self._id = id

    @property
    def area_type(self):
        """
        Gets the area_type of this GeoArea.

        :return: The area_type of this GeoArea.
        :rtype: str
        """
        return self._area_type

    @area_type.setter
    def area_type(self, area_type):
        """
        Sets the area_type of this GeoArea.

        :param area_type: The area_type of this GeoArea.
        :type: str
        """

        self._area_type = area_type

    @property
    def locality(self):
        """
        Gets the locality of this GeoArea.

        :return: The locality of this GeoArea.
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """
        Sets the locality of this GeoArea.

        :param locality: The locality of this GeoArea.
        :type: str
        """

        self._locality = locality

    @property
    def shape(self):
        """
        Gets the shape of this GeoArea.

        :return: The shape of this GeoArea.
        :rtype: GeoJsonObject
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """
        Sets the shape of this GeoArea.

        :param shape: The shape of this GeoArea.
        :type: GeoJsonObject
        """

        self._shape = shape

    @property
    def source(self):
        """
        Gets the source of this GeoArea.

        :return: The source of this GeoArea.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this GeoArea.

        :param source: The source of this GeoArea.
        :type: str
        """

        self._source = source

    @property
    def iso_code(self):
        """
        Gets the iso_code of this GeoArea.

        :return: The iso_code of this GeoArea.
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """
        Sets the iso_code of this GeoArea.

        :param iso_code: The iso_code of this GeoArea.
        :type: str
        """

        self._iso_code = iso_code

    @property
    def country_nl(self):
        """
        Gets the country_nl of this GeoArea.

        :return: The country_nl of this GeoArea.
        :rtype: str
        """
        return self._country_nl

    @country_nl.setter
    def country_nl(self, country_nl):
        """
        Sets the country_nl of this GeoArea.

        :param country_nl: The country_nl of this GeoArea.
        :type: str
        """

        self._country_nl = country_nl

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GeoArea):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
