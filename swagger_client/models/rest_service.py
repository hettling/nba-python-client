# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RestService(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_point': 'str',
        'method': 'str',
        'consumes': 'str',
        'produces': 'str',
        'url': 'str'
    }

    attribute_map = {
        'end_point': 'endPoint',
        'method': 'method',
        'consumes': 'consumes',
        'produces': 'produces',
        'url': 'url'
    }

    def __init__(self, end_point=None, method=None, consumes=None, produces=None, url=None):
        """
        RestService - a model defined in Swagger
        """

        self._end_point = None
        self._method = None
        self._consumes = None
        self._produces = None
        self._url = None
        self.discriminator = None

        if end_point is not None:
          self.end_point = end_point
        if method is not None:
          self.method = method
        if consumes is not None:
          self.consumes = consumes
        if produces is not None:
          self.produces = produces
        if url is not None:
          self.url = url

    @property
    def end_point(self):
        """
        Gets the end_point of this RestService.

        :return: The end_point of this RestService.
        :rtype: str
        """
        return self._end_point

    @end_point.setter
    def end_point(self, end_point):
        """
        Sets the end_point of this RestService.

        :param end_point: The end_point of this RestService.
        :type: str
        """

        self._end_point = end_point

    @property
    def method(self):
        """
        Gets the method of this RestService.

        :return: The method of this RestService.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """
        Sets the method of this RestService.

        :param method: The method of this RestService.
        :type: str
        """

        self._method = method

    @property
    def consumes(self):
        """
        Gets the consumes of this RestService.

        :return: The consumes of this RestService.
        :rtype: str
        """
        return self._consumes

    @consumes.setter
    def consumes(self, consumes):
        """
        Sets the consumes of this RestService.

        :param consumes: The consumes of this RestService.
        :type: str
        """

        self._consumes = consumes

    @property
    def produces(self):
        """
        Gets the produces of this RestService.

        :return: The produces of this RestService.
        :rtype: str
        """
        return self._produces

    @produces.setter
    def produces(self, produces):
        """
        Sets the produces of this RestService.

        :param produces: The produces of this RestService.
        :type: str
        """

        self._produces = produces

    @property
    def url(self):
        """
        Gets the url of this RestService.

        :return: The url of this RestService.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this RestService.

        :param url: The url of this RestService.
        :type: str
        """

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RestService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
