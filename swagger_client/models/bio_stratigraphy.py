# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BioStratigraphy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'young_bio_dating_qualifier': 'str',
        'young_bio_name': 'str',
        'young_fossil_zone': 'str',
        'young_fossil_sub_zone': 'str',
        'young_bio_certainty': 'str',
        'young_strat_type': 'str',
        'bio_dating_qualifier': 'str',
        'bio_preferred_flag': 'bool',
        'range_position': 'str',
        'old_bio_name': 'str',
        'bio_identifier': 'str',
        'old_fossilzone': 'str',
        'old_fossil_subzone': 'str',
        'old_bio_certainty': 'str',
        'old_bio_strat_type': 'str'
    }

    attribute_map = {
        'young_bio_dating_qualifier': 'youngBioDatingQualifier',
        'young_bio_name': 'youngBioName',
        'young_fossil_zone': 'youngFossilZone',
        'young_fossil_sub_zone': 'youngFossilSubZone',
        'young_bio_certainty': 'youngBioCertainty',
        'young_strat_type': 'youngStratType',
        'bio_dating_qualifier': 'bioDatingQualifier',
        'bio_preferred_flag': 'bioPreferredFlag',
        'range_position': 'rangePosition',
        'old_bio_name': 'oldBioName',
        'bio_identifier': 'bioIdentifier',
        'old_fossilzone': 'oldFossilzone',
        'old_fossil_subzone': 'oldFossilSubzone',
        'old_bio_certainty': 'oldBioCertainty',
        'old_bio_strat_type': 'oldBioStratType'
    }

    def __init__(self, young_bio_dating_qualifier=None, young_bio_name=None, young_fossil_zone=None, young_fossil_sub_zone=None, young_bio_certainty=None, young_strat_type=None, bio_dating_qualifier=None, bio_preferred_flag=None, range_position=None, old_bio_name=None, bio_identifier=None, old_fossilzone=None, old_fossil_subzone=None, old_bio_certainty=None, old_bio_strat_type=None):
        """
        BioStratigraphy - a model defined in Swagger
        """

        self._young_bio_dating_qualifier = None
        self._young_bio_name = None
        self._young_fossil_zone = None
        self._young_fossil_sub_zone = None
        self._young_bio_certainty = None
        self._young_strat_type = None
        self._bio_dating_qualifier = None
        self._bio_preferred_flag = None
        self._range_position = None
        self._old_bio_name = None
        self._bio_identifier = None
        self._old_fossilzone = None
        self._old_fossil_subzone = None
        self._old_bio_certainty = None
        self._old_bio_strat_type = None
        self.discriminator = None

        if young_bio_dating_qualifier is not None:
          self.young_bio_dating_qualifier = young_bio_dating_qualifier
        if young_bio_name is not None:
          self.young_bio_name = young_bio_name
        if young_fossil_zone is not None:
          self.young_fossil_zone = young_fossil_zone
        if young_fossil_sub_zone is not None:
          self.young_fossil_sub_zone = young_fossil_sub_zone
        if young_bio_certainty is not None:
          self.young_bio_certainty = young_bio_certainty
        if young_strat_type is not None:
          self.young_strat_type = young_strat_type
        if bio_dating_qualifier is not None:
          self.bio_dating_qualifier = bio_dating_qualifier
        if bio_preferred_flag is not None:
          self.bio_preferred_flag = bio_preferred_flag
        if range_position is not None:
          self.range_position = range_position
        if old_bio_name is not None:
          self.old_bio_name = old_bio_name
        if bio_identifier is not None:
          self.bio_identifier = bio_identifier
        if old_fossilzone is not None:
          self.old_fossilzone = old_fossilzone
        if old_fossil_subzone is not None:
          self.old_fossil_subzone = old_fossil_subzone
        if old_bio_certainty is not None:
          self.old_bio_certainty = old_bio_certainty
        if old_bio_strat_type is not None:
          self.old_bio_strat_type = old_bio_strat_type

    @property
    def young_bio_dating_qualifier(self):
        """
        Gets the young_bio_dating_qualifier of this BioStratigraphy.

        :return: The young_bio_dating_qualifier of this BioStratigraphy.
        :rtype: str
        """
        return self._young_bio_dating_qualifier

    @young_bio_dating_qualifier.setter
    def young_bio_dating_qualifier(self, young_bio_dating_qualifier):
        """
        Sets the young_bio_dating_qualifier of this BioStratigraphy.

        :param young_bio_dating_qualifier: The young_bio_dating_qualifier of this BioStratigraphy.
        :type: str
        """

        self._young_bio_dating_qualifier = young_bio_dating_qualifier

    @property
    def young_bio_name(self):
        """
        Gets the young_bio_name of this BioStratigraphy.

        :return: The young_bio_name of this BioStratigraphy.
        :rtype: str
        """
        return self._young_bio_name

    @young_bio_name.setter
    def young_bio_name(self, young_bio_name):
        """
        Sets the young_bio_name of this BioStratigraphy.

        :param young_bio_name: The young_bio_name of this BioStratigraphy.
        :type: str
        """

        self._young_bio_name = young_bio_name

    @property
    def young_fossil_zone(self):
        """
        Gets the young_fossil_zone of this BioStratigraphy.

        :return: The young_fossil_zone of this BioStratigraphy.
        :rtype: str
        """
        return self._young_fossil_zone

    @young_fossil_zone.setter
    def young_fossil_zone(self, young_fossil_zone):
        """
        Sets the young_fossil_zone of this BioStratigraphy.

        :param young_fossil_zone: The young_fossil_zone of this BioStratigraphy.
        :type: str
        """

        self._young_fossil_zone = young_fossil_zone

    @property
    def young_fossil_sub_zone(self):
        """
        Gets the young_fossil_sub_zone of this BioStratigraphy.

        :return: The young_fossil_sub_zone of this BioStratigraphy.
        :rtype: str
        """
        return self._young_fossil_sub_zone

    @young_fossil_sub_zone.setter
    def young_fossil_sub_zone(self, young_fossil_sub_zone):
        """
        Sets the young_fossil_sub_zone of this BioStratigraphy.

        :param young_fossil_sub_zone: The young_fossil_sub_zone of this BioStratigraphy.
        :type: str
        """

        self._young_fossil_sub_zone = young_fossil_sub_zone

    @property
    def young_bio_certainty(self):
        """
        Gets the young_bio_certainty of this BioStratigraphy.

        :return: The young_bio_certainty of this BioStratigraphy.
        :rtype: str
        """
        return self._young_bio_certainty

    @young_bio_certainty.setter
    def young_bio_certainty(self, young_bio_certainty):
        """
        Sets the young_bio_certainty of this BioStratigraphy.

        :param young_bio_certainty: The young_bio_certainty of this BioStratigraphy.
        :type: str
        """

        self._young_bio_certainty = young_bio_certainty

    @property
    def young_strat_type(self):
        """
        Gets the young_strat_type of this BioStratigraphy.

        :return: The young_strat_type of this BioStratigraphy.
        :rtype: str
        """
        return self._young_strat_type

    @young_strat_type.setter
    def young_strat_type(self, young_strat_type):
        """
        Sets the young_strat_type of this BioStratigraphy.

        :param young_strat_type: The young_strat_type of this BioStratigraphy.
        :type: str
        """

        self._young_strat_type = young_strat_type

    @property
    def bio_dating_qualifier(self):
        """
        Gets the bio_dating_qualifier of this BioStratigraphy.

        :return: The bio_dating_qualifier of this BioStratigraphy.
        :rtype: str
        """
        return self._bio_dating_qualifier

    @bio_dating_qualifier.setter
    def bio_dating_qualifier(self, bio_dating_qualifier):
        """
        Sets the bio_dating_qualifier of this BioStratigraphy.

        :param bio_dating_qualifier: The bio_dating_qualifier of this BioStratigraphy.
        :type: str
        """

        self._bio_dating_qualifier = bio_dating_qualifier

    @property
    def bio_preferred_flag(self):
        """
        Gets the bio_preferred_flag of this BioStratigraphy.

        :return: The bio_preferred_flag of this BioStratigraphy.
        :rtype: bool
        """
        return self._bio_preferred_flag

    @bio_preferred_flag.setter
    def bio_preferred_flag(self, bio_preferred_flag):
        """
        Sets the bio_preferred_flag of this BioStratigraphy.

        :param bio_preferred_flag: The bio_preferred_flag of this BioStratigraphy.
        :type: bool
        """

        self._bio_preferred_flag = bio_preferred_flag

    @property
    def range_position(self):
        """
        Gets the range_position of this BioStratigraphy.

        :return: The range_position of this BioStratigraphy.
        :rtype: str
        """
        return self._range_position

    @range_position.setter
    def range_position(self, range_position):
        """
        Sets the range_position of this BioStratigraphy.

        :param range_position: The range_position of this BioStratigraphy.
        :type: str
        """

        self._range_position = range_position

    @property
    def old_bio_name(self):
        """
        Gets the old_bio_name of this BioStratigraphy.

        :return: The old_bio_name of this BioStratigraphy.
        :rtype: str
        """
        return self._old_bio_name

    @old_bio_name.setter
    def old_bio_name(self, old_bio_name):
        """
        Sets the old_bio_name of this BioStratigraphy.

        :param old_bio_name: The old_bio_name of this BioStratigraphy.
        :type: str
        """

        self._old_bio_name = old_bio_name

    @property
    def bio_identifier(self):
        """
        Gets the bio_identifier of this BioStratigraphy.

        :return: The bio_identifier of this BioStratigraphy.
        :rtype: str
        """
        return self._bio_identifier

    @bio_identifier.setter
    def bio_identifier(self, bio_identifier):
        """
        Sets the bio_identifier of this BioStratigraphy.

        :param bio_identifier: The bio_identifier of this BioStratigraphy.
        :type: str
        """

        self._bio_identifier = bio_identifier

    @property
    def old_fossilzone(self):
        """
        Gets the old_fossilzone of this BioStratigraphy.

        :return: The old_fossilzone of this BioStratigraphy.
        :rtype: str
        """
        return self._old_fossilzone

    @old_fossilzone.setter
    def old_fossilzone(self, old_fossilzone):
        """
        Sets the old_fossilzone of this BioStratigraphy.

        :param old_fossilzone: The old_fossilzone of this BioStratigraphy.
        :type: str
        """

        self._old_fossilzone = old_fossilzone

    @property
    def old_fossil_subzone(self):
        """
        Gets the old_fossil_subzone of this BioStratigraphy.

        :return: The old_fossil_subzone of this BioStratigraphy.
        :rtype: str
        """
        return self._old_fossil_subzone

    @old_fossil_subzone.setter
    def old_fossil_subzone(self, old_fossil_subzone):
        """
        Sets the old_fossil_subzone of this BioStratigraphy.

        :param old_fossil_subzone: The old_fossil_subzone of this BioStratigraphy.
        :type: str
        """

        self._old_fossil_subzone = old_fossil_subzone

    @property
    def old_bio_certainty(self):
        """
        Gets the old_bio_certainty of this BioStratigraphy.

        :return: The old_bio_certainty of this BioStratigraphy.
        :rtype: str
        """
        return self._old_bio_certainty

    @old_bio_certainty.setter
    def old_bio_certainty(self, old_bio_certainty):
        """
        Sets the old_bio_certainty of this BioStratigraphy.

        :param old_bio_certainty: The old_bio_certainty of this BioStratigraphy.
        :type: str
        """

        self._old_bio_certainty = old_bio_certainty

    @property
    def old_bio_strat_type(self):
        """
        Gets the old_bio_strat_type of this BioStratigraphy.

        :return: The old_bio_strat_type of this BioStratigraphy.
        :rtype: str
        """
        return self._old_bio_strat_type

    @old_bio_strat_type.setter
    def old_bio_strat_type(self, old_bio_strat_type):
        """
        Sets the old_bio_strat_type of this BioStratigraphy.

        :param old_bio_strat_type: The old_bio_strat_type of this BioStratigraphy.
        :type: str
        """

        self._old_bio_strat_type = old_bio_strat_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BioStratigraphy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
