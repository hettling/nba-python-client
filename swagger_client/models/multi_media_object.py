# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MultiMediaObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_system': 'SourceSystem',
        'source_system_id': 'str',
        'record_uri': 'str',
        'id': 'str',
        'source_institution_id': 'str',
        'source_id': 'str',
        'owner': 'str',
        'license_type': 'str',
        'license': 'str',
        'unit_id': 'str',
        'collection_type': 'str',
        'title': 'str',
        'caption': 'str',
        'description': 'str',
        'service_access_points': 'list[ServiceAccessPoint]',
        'type': 'str',
        'taxon_count': 'int',
        'creator': 'str',
        'copyright_text': 'str',
        'associated_specimen_reference': 'str',
        'associated_taxon_reference': 'str',
        'multi_media_public': 'bool',
        'subject_parts': 'list[str]',
        'subject_orientations': 'list[str]',
        'phases_or_stages': 'list[str]',
        'sexes': 'list[str]',
        'gathering_events': 'list[MultiMediaGatheringEvent]',
        'identifications': 'list[MultiMediaContentIdentification]',
        'theme': 'list[str]',
        'associated_specimen': 'Specimen',
        'associated_taxon': 'Taxon'
    }

    attribute_map = {
        'source_system': 'sourceSystem',
        'source_system_id': 'sourceSystemId',
        'record_uri': 'recordURI',
        'id': 'id',
        'source_institution_id': 'sourceInstitutionID',
        'source_id': 'sourceID',
        'owner': 'owner',
        'license_type': 'licenseType',
        'license': 'license',
        'unit_id': 'unitID',
        'collection_type': 'collectionType',
        'title': 'title',
        'caption': 'caption',
        'description': 'description',
        'service_access_points': 'serviceAccessPoints',
        'type': 'type',
        'taxon_count': 'taxonCount',
        'creator': 'creator',
        'copyright_text': 'copyrightText',
        'associated_specimen_reference': 'associatedSpecimenReference',
        'associated_taxon_reference': 'associatedTaxonReference',
        'multi_media_public': 'multiMediaPublic',
        'subject_parts': 'subjectParts',
        'subject_orientations': 'subjectOrientations',
        'phases_or_stages': 'phasesOrStages',
        'sexes': 'sexes',
        'gathering_events': 'gatheringEvents',
        'identifications': 'identifications',
        'theme': 'theme',
        'associated_specimen': 'associatedSpecimen',
        'associated_taxon': 'associatedTaxon'
    }

    def __init__(self, source_system=None, source_system_id=None, record_uri=None, id=None, source_institution_id=None, source_id=None, owner=None, license_type=None, license=None, unit_id=None, collection_type=None, title=None, caption=None, description=None, service_access_points=None, type=None, taxon_count=None, creator=None, copyright_text=None, associated_specimen_reference=None, associated_taxon_reference=None, multi_media_public=None, subject_parts=None, subject_orientations=None, phases_or_stages=None, sexes=None, gathering_events=None, identifications=None, theme=None, associated_specimen=None, associated_taxon=None):
        """
        MultiMediaObject - a model defined in Swagger
        """

        self._source_system = None
        self._source_system_id = None
        self._record_uri = None
        self._id = None
        self._source_institution_id = None
        self._source_id = None
        self._owner = None
        self._license_type = None
        self._license = None
        self._unit_id = None
        self._collection_type = None
        self._title = None
        self._caption = None
        self._description = None
        self._service_access_points = None
        self._type = None
        self._taxon_count = None
        self._creator = None
        self._copyright_text = None
        self._associated_specimen_reference = None
        self._associated_taxon_reference = None
        self._multi_media_public = None
        self._subject_parts = None
        self._subject_orientations = None
        self._phases_or_stages = None
        self._sexes = None
        self._gathering_events = None
        self._identifications = None
        self._theme = None
        self._associated_specimen = None
        self._associated_taxon = None
        self.discriminator = None

        if source_system is not None:
          self.source_system = source_system
        if source_system_id is not None:
          self.source_system_id = source_system_id
        if record_uri is not None:
          self.record_uri = record_uri
        if id is not None:
          self.id = id
        if source_institution_id is not None:
          self.source_institution_id = source_institution_id
        if source_id is not None:
          self.source_id = source_id
        if owner is not None:
          self.owner = owner
        if license_type is not None:
          self.license_type = license_type
        if license is not None:
          self.license = license
        if unit_id is not None:
          self.unit_id = unit_id
        if collection_type is not None:
          self.collection_type = collection_type
        if title is not None:
          self.title = title
        if caption is not None:
          self.caption = caption
        if description is not None:
          self.description = description
        if service_access_points is not None:
          self.service_access_points = service_access_points
        if type is not None:
          self.type = type
        if taxon_count is not None:
          self.taxon_count = taxon_count
        if creator is not None:
          self.creator = creator
        if copyright_text is not None:
          self.copyright_text = copyright_text
        if associated_specimen_reference is not None:
          self.associated_specimen_reference = associated_specimen_reference
        if associated_taxon_reference is not None:
          self.associated_taxon_reference = associated_taxon_reference
        if multi_media_public is not None:
          self.multi_media_public = multi_media_public
        if subject_parts is not None:
          self.subject_parts = subject_parts
        if subject_orientations is not None:
          self.subject_orientations = subject_orientations
        if phases_or_stages is not None:
          self.phases_or_stages = phases_or_stages
        if sexes is not None:
          self.sexes = sexes
        if gathering_events is not None:
          self.gathering_events = gathering_events
        if identifications is not None:
          self.identifications = identifications
        if theme is not None:
          self.theme = theme
        if associated_specimen is not None:
          self.associated_specimen = associated_specimen
        if associated_taxon is not None:
          self.associated_taxon = associated_taxon

    @property
    def source_system(self):
        """
        Gets the source_system of this MultiMediaObject.

        :return: The source_system of this MultiMediaObject.
        :rtype: SourceSystem
        """
        return self._source_system

    @source_system.setter
    def source_system(self, source_system):
        """
        Sets the source_system of this MultiMediaObject.

        :param source_system: The source_system of this MultiMediaObject.
        :type: SourceSystem
        """

        self._source_system = source_system

    @property
    def source_system_id(self):
        """
        Gets the source_system_id of this MultiMediaObject.

        :return: The source_system_id of this MultiMediaObject.
        :rtype: str
        """
        return self._source_system_id

    @source_system_id.setter
    def source_system_id(self, source_system_id):
        """
        Sets the source_system_id of this MultiMediaObject.

        :param source_system_id: The source_system_id of this MultiMediaObject.
        :type: str
        """

        self._source_system_id = source_system_id

    @property
    def record_uri(self):
        """
        Gets the record_uri of this MultiMediaObject.

        :return: The record_uri of this MultiMediaObject.
        :rtype: str
        """
        return self._record_uri

    @record_uri.setter
    def record_uri(self, record_uri):
        """
        Sets the record_uri of this MultiMediaObject.

        :param record_uri: The record_uri of this MultiMediaObject.
        :type: str
        """

        self._record_uri = record_uri

    @property
    def id(self):
        """
        Gets the id of this MultiMediaObject.

        :return: The id of this MultiMediaObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MultiMediaObject.

        :param id: The id of this MultiMediaObject.
        :type: str
        """

        self._id = id

    @property
    def source_institution_id(self):
        """
        Gets the source_institution_id of this MultiMediaObject.

        :return: The source_institution_id of this MultiMediaObject.
        :rtype: str
        """
        return self._source_institution_id

    @source_institution_id.setter
    def source_institution_id(self, source_institution_id):
        """
        Sets the source_institution_id of this MultiMediaObject.

        :param source_institution_id: The source_institution_id of this MultiMediaObject.
        :type: str
        """

        self._source_institution_id = source_institution_id

    @property
    def source_id(self):
        """
        Gets the source_id of this MultiMediaObject.

        :return: The source_id of this MultiMediaObject.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this MultiMediaObject.

        :param source_id: The source_id of this MultiMediaObject.
        :type: str
        """

        self._source_id = source_id

    @property
    def owner(self):
        """
        Gets the owner of this MultiMediaObject.

        :return: The owner of this MultiMediaObject.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this MultiMediaObject.

        :param owner: The owner of this MultiMediaObject.
        :type: str
        """

        self._owner = owner

    @property
    def license_type(self):
        """
        Gets the license_type of this MultiMediaObject.

        :return: The license_type of this MultiMediaObject.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """
        Sets the license_type of this MultiMediaObject.

        :param license_type: The license_type of this MultiMediaObject.
        :type: str
        """

        self._license_type = license_type

    @property
    def license(self):
        """
        Gets the license of this MultiMediaObject.

        :return: The license of this MultiMediaObject.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """
        Sets the license of this MultiMediaObject.

        :param license: The license of this MultiMediaObject.
        :type: str
        """

        self._license = license

    @property
    def unit_id(self):
        """
        Gets the unit_id of this MultiMediaObject.

        :return: The unit_id of this MultiMediaObject.
        :rtype: str
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """
        Sets the unit_id of this MultiMediaObject.

        :param unit_id: The unit_id of this MultiMediaObject.
        :type: str
        """

        self._unit_id = unit_id

    @property
    def collection_type(self):
        """
        Gets the collection_type of this MultiMediaObject.

        :return: The collection_type of this MultiMediaObject.
        :rtype: str
        """
        return self._collection_type

    @collection_type.setter
    def collection_type(self, collection_type):
        """
        Sets the collection_type of this MultiMediaObject.

        :param collection_type: The collection_type of this MultiMediaObject.
        :type: str
        """

        self._collection_type = collection_type

    @property
    def title(self):
        """
        Gets the title of this MultiMediaObject.

        :return: The title of this MultiMediaObject.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this MultiMediaObject.

        :param title: The title of this MultiMediaObject.
        :type: str
        """

        self._title = title

    @property
    def caption(self):
        """
        Gets the caption of this MultiMediaObject.

        :return: The caption of this MultiMediaObject.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """
        Sets the caption of this MultiMediaObject.

        :param caption: The caption of this MultiMediaObject.
        :type: str
        """

        self._caption = caption

    @property
    def description(self):
        """
        Gets the description of this MultiMediaObject.

        :return: The description of this MultiMediaObject.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MultiMediaObject.

        :param description: The description of this MultiMediaObject.
        :type: str
        """

        self._description = description

    @property
    def service_access_points(self):
        """
        Gets the service_access_points of this MultiMediaObject.

        :return: The service_access_points of this MultiMediaObject.
        :rtype: list[ServiceAccessPoint]
        """
        return self._service_access_points

    @service_access_points.setter
    def service_access_points(self, service_access_points):
        """
        Sets the service_access_points of this MultiMediaObject.

        :param service_access_points: The service_access_points of this MultiMediaObject.
        :type: list[ServiceAccessPoint]
        """

        self._service_access_points = service_access_points

    @property
    def type(self):
        """
        Gets the type of this MultiMediaObject.

        :return: The type of this MultiMediaObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MultiMediaObject.

        :param type: The type of this MultiMediaObject.
        :type: str
        """
        allowed_values = ["COLLECTION", "STILL_IMAGE", "SOUND", "MOVING_IMAGE", "INTERACTIVE_RESOURCE", "TEXT", "OTHER"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def taxon_count(self):
        """
        Gets the taxon_count of this MultiMediaObject.

        :return: The taxon_count of this MultiMediaObject.
        :rtype: int
        """
        return self._taxon_count

    @taxon_count.setter
    def taxon_count(self, taxon_count):
        """
        Sets the taxon_count of this MultiMediaObject.

        :param taxon_count: The taxon_count of this MultiMediaObject.
        :type: int
        """

        self._taxon_count = taxon_count

    @property
    def creator(self):
        """
        Gets the creator of this MultiMediaObject.

        :return: The creator of this MultiMediaObject.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this MultiMediaObject.

        :param creator: The creator of this MultiMediaObject.
        :type: str
        """

        self._creator = creator

    @property
    def copyright_text(self):
        """
        Gets the copyright_text of this MultiMediaObject.

        :return: The copyright_text of this MultiMediaObject.
        :rtype: str
        """
        return self._copyright_text

    @copyright_text.setter
    def copyright_text(self, copyright_text):
        """
        Sets the copyright_text of this MultiMediaObject.

        :param copyright_text: The copyright_text of this MultiMediaObject.
        :type: str
        """

        self._copyright_text = copyright_text

    @property
    def associated_specimen_reference(self):
        """
        Gets the associated_specimen_reference of this MultiMediaObject.

        :return: The associated_specimen_reference of this MultiMediaObject.
        :rtype: str
        """
        return self._associated_specimen_reference

    @associated_specimen_reference.setter
    def associated_specimen_reference(self, associated_specimen_reference):
        """
        Sets the associated_specimen_reference of this MultiMediaObject.

        :param associated_specimen_reference: The associated_specimen_reference of this MultiMediaObject.
        :type: str
        """

        self._associated_specimen_reference = associated_specimen_reference

    @property
    def associated_taxon_reference(self):
        """
        Gets the associated_taxon_reference of this MultiMediaObject.

        :return: The associated_taxon_reference of this MultiMediaObject.
        :rtype: str
        """
        return self._associated_taxon_reference

    @associated_taxon_reference.setter
    def associated_taxon_reference(self, associated_taxon_reference):
        """
        Sets the associated_taxon_reference of this MultiMediaObject.

        :param associated_taxon_reference: The associated_taxon_reference of this MultiMediaObject.
        :type: str
        """

        self._associated_taxon_reference = associated_taxon_reference

    @property
    def multi_media_public(self):
        """
        Gets the multi_media_public of this MultiMediaObject.

        :return: The multi_media_public of this MultiMediaObject.
        :rtype: bool
        """
        return self._multi_media_public

    @multi_media_public.setter
    def multi_media_public(self, multi_media_public):
        """
        Sets the multi_media_public of this MultiMediaObject.

        :param multi_media_public: The multi_media_public of this MultiMediaObject.
        :type: bool
        """

        self._multi_media_public = multi_media_public

    @property
    def subject_parts(self):
        """
        Gets the subject_parts of this MultiMediaObject.

        :return: The subject_parts of this MultiMediaObject.
        :rtype: list[str]
        """
        return self._subject_parts

    @subject_parts.setter
    def subject_parts(self, subject_parts):
        """
        Sets the subject_parts of this MultiMediaObject.

        :param subject_parts: The subject_parts of this MultiMediaObject.
        :type: list[str]
        """

        self._subject_parts = subject_parts

    @property
    def subject_orientations(self):
        """
        Gets the subject_orientations of this MultiMediaObject.

        :return: The subject_orientations of this MultiMediaObject.
        :rtype: list[str]
        """
        return self._subject_orientations

    @subject_orientations.setter
    def subject_orientations(self, subject_orientations):
        """
        Sets the subject_orientations of this MultiMediaObject.

        :param subject_orientations: The subject_orientations of this MultiMediaObject.
        :type: list[str]
        """

        self._subject_orientations = subject_orientations

    @property
    def phases_or_stages(self):
        """
        Gets the phases_or_stages of this MultiMediaObject.

        :return: The phases_or_stages of this MultiMediaObject.
        :rtype: list[str]
        """
        return self._phases_or_stages

    @phases_or_stages.setter
    def phases_or_stages(self, phases_or_stages):
        """
        Sets the phases_or_stages of this MultiMediaObject.

        :param phases_or_stages: The phases_or_stages of this MultiMediaObject.
        :type: list[str]
        """

        self._phases_or_stages = phases_or_stages

    @property
    def sexes(self):
        """
        Gets the sexes of this MultiMediaObject.

        :return: The sexes of this MultiMediaObject.
        :rtype: list[str]
        """
        return self._sexes

    @sexes.setter
    def sexes(self, sexes):
        """
        Sets the sexes of this MultiMediaObject.

        :param sexes: The sexes of this MultiMediaObject.
        :type: list[str]
        """

        self._sexes = sexes

    @property
    def gathering_events(self):
        """
        Gets the gathering_events of this MultiMediaObject.

        :return: The gathering_events of this MultiMediaObject.
        :rtype: list[MultiMediaGatheringEvent]
        """
        return self._gathering_events

    @gathering_events.setter
    def gathering_events(self, gathering_events):
        """
        Sets the gathering_events of this MultiMediaObject.

        :param gathering_events: The gathering_events of this MultiMediaObject.
        :type: list[MultiMediaGatheringEvent]
        """

        self._gathering_events = gathering_events

    @property
    def identifications(self):
        """
        Gets the identifications of this MultiMediaObject.

        :return: The identifications of this MultiMediaObject.
        :rtype: list[MultiMediaContentIdentification]
        """
        return self._identifications

    @identifications.setter
    def identifications(self, identifications):
        """
        Sets the identifications of this MultiMediaObject.

        :param identifications: The identifications of this MultiMediaObject.
        :type: list[MultiMediaContentIdentification]
        """

        self._identifications = identifications

    @property
    def theme(self):
        """
        Gets the theme of this MultiMediaObject.

        :return: The theme of this MultiMediaObject.
        :rtype: list[str]
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """
        Sets the theme of this MultiMediaObject.

        :param theme: The theme of this MultiMediaObject.
        :type: list[str]
        """

        self._theme = theme

    @property
    def associated_specimen(self):
        """
        Gets the associated_specimen of this MultiMediaObject.

        :return: The associated_specimen of this MultiMediaObject.
        :rtype: Specimen
        """
        return self._associated_specimen

    @associated_specimen.setter
    def associated_specimen(self, associated_specimen):
        """
        Sets the associated_specimen of this MultiMediaObject.

        :param associated_specimen: The associated_specimen of this MultiMediaObject.
        :type: Specimen
        """

        self._associated_specimen = associated_specimen

    @property
    def associated_taxon(self):
        """
        Gets the associated_taxon of this MultiMediaObject.

        :return: The associated_taxon of this MultiMediaObject.
        :rtype: Taxon
        """
        return self._associated_taxon

    @associated_taxon.setter
    def associated_taxon(self, associated_taxon):
        """
        Sets the associated_taxon of this MultiMediaObject.

        :param associated_taxon: The associated_taxon of this MultiMediaObject.
        :type: Taxon
        """

        self._associated_taxon = associated_taxon

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MultiMediaObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
