# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FieldInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'indexed': 'bool',
        'type': 'str',
        'allowed_operators': 'list[str]'
    }

    attribute_map = {
        'indexed': 'indexed',
        'type': 'type',
        'allowed_operators': 'allowedOperators'
    }

    def __init__(self, indexed=None, type=None, allowed_operators=None):
        """
        FieldInfo - a model defined in Swagger
        """

        self._indexed = None
        self._type = None
        self._allowed_operators = None
        self.discriminator = None

        if indexed is not None:
          self.indexed = indexed
        if type is not None:
          self.type = type
        if allowed_operators is not None:
          self.allowed_operators = allowed_operators

    @property
    def indexed(self):
        """
        Gets the indexed of this FieldInfo.

        :return: The indexed of this FieldInfo.
        :rtype: bool
        """
        return self._indexed

    @indexed.setter
    def indexed(self, indexed):
        """
        Sets the indexed of this FieldInfo.

        :param indexed: The indexed of this FieldInfo.
        :type: bool
        """

        self._indexed = indexed

    @property
    def type(self):
        """
        Gets the type of this FieldInfo.

        :return: The type of this FieldInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this FieldInfo.

        :param type: The type of this FieldInfo.
        :type: str
        """

        self._type = type

    @property
    def allowed_operators(self):
        """
        Gets the allowed_operators of this FieldInfo.

        :return: The allowed_operators of this FieldInfo.
        :rtype: list[str]
        """
        return self._allowed_operators

    @allowed_operators.setter
    def allowed_operators(self, allowed_operators):
        """
        Sets the allowed_operators of this FieldInfo.

        :param allowed_operators: The allowed_operators of this FieldInfo.
        :type: list[str]
        """
        allowed_values = ["EQUALS", "NOT_EQUALS", "EQUALS_IC", "NOT_EQUALS_IC", "LIKE", "NOT_LIKE", "LT", "LTE", "GT", "GTE", "BETWEEN", "NOT_BETWEEN", "IN", "NOT_IN", "MATCHES", "NOT_MATCHES", "STARTS_WITH", "NOT_STARTS_WITH", "STARTS_WITH_IC", "NOT_STARTS_WITH_IC"]
        if not set(allowed_operators).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_operators` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allowed_operators)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_operators = allowed_operators

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FieldInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
