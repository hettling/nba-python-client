# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TaxonomicEnrichment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vernacular_names': 'list[SummaryVernacularName]',
        'synonyms': 'list[SummaryScientificName]',
        'source_system': 'SummarySourceSystem',
        'taxon_id': 'str'
    }

    attribute_map = {
        'vernacular_names': 'vernacularNames',
        'synonyms': 'synonyms',
        'source_system': 'sourceSystem',
        'taxon_id': 'taxonId'
    }

    def __init__(self, vernacular_names=None, synonyms=None, source_system=None, taxon_id=None):
        """
        TaxonomicEnrichment - a model defined in Swagger
        """

        self._vernacular_names = None
        self._synonyms = None
        self._source_system = None
        self._taxon_id = None
        self.discriminator = None

        if vernacular_names is not None:
          self.vernacular_names = vernacular_names
        if synonyms is not None:
          self.synonyms = synonyms
        if source_system is not None:
          self.source_system = source_system
        if taxon_id is not None:
          self.taxon_id = taxon_id

    @property
    def vernacular_names(self):
        """
        Gets the vernacular_names of this TaxonomicEnrichment.

        :return: The vernacular_names of this TaxonomicEnrichment.
        :rtype: list[SummaryVernacularName]
        """
        return self._vernacular_names

    @vernacular_names.setter
    def vernacular_names(self, vernacular_names):
        """
        Sets the vernacular_names of this TaxonomicEnrichment.

        :param vernacular_names: The vernacular_names of this TaxonomicEnrichment.
        :type: list[SummaryVernacularName]
        """

        self._vernacular_names = vernacular_names

    @property
    def synonyms(self):
        """
        Gets the synonyms of this TaxonomicEnrichment.

        :return: The synonyms of this TaxonomicEnrichment.
        :rtype: list[SummaryScientificName]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """
        Sets the synonyms of this TaxonomicEnrichment.

        :param synonyms: The synonyms of this TaxonomicEnrichment.
        :type: list[SummaryScientificName]
        """

        self._synonyms = synonyms

    @property
    def source_system(self):
        """
        Gets the source_system of this TaxonomicEnrichment.

        :return: The source_system of this TaxonomicEnrichment.
        :rtype: SummarySourceSystem
        """
        return self._source_system

    @source_system.setter
    def source_system(self, source_system):
        """
        Sets the source_system of this TaxonomicEnrichment.

        :param source_system: The source_system of this TaxonomicEnrichment.
        :type: SummarySourceSystem
        """

        self._source_system = source_system

    @property
    def taxon_id(self):
        """
        Gets the taxon_id of this TaxonomicEnrichment.

        :return: The taxon_id of this TaxonomicEnrichment.
        :rtype: str
        """
        return self._taxon_id

    @taxon_id.setter
    def taxon_id(self, taxon_id):
        """
        Sets the taxon_id of this TaxonomicEnrichment.

        :param taxon_id: The taxon_id of this TaxonomicEnrichment.
        :type: str
        """

        self._taxon_id = taxon_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TaxonomicEnrichment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
